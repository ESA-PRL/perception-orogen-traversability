name "traversability"

import_types_from "traversabilityTypes.hpp"

using_library "traversability"
using_library "frame_helper"
using_library "opencv"

import_types_from "std"
import_types_from "base"

task_context "Task" do
    needs_configuration

    # map parameters
    property("map_size_width","float",5.0).doc("Size of the map width in meters")
    property("map_size_height","float",5.0).doc("Size of the map height in meters")
    property("map_resolution","float",0.05).doc("Resolution of each cell in meters")
    property("slope_map_scale","int",5).doc("How many normal cell a slope map cell will contain")

    # obstacle detection parameters
    property("laplacian_kernel_size","int",9).doc("Size of the kernel used in the laplacian to detect rocks edges")
    property("laplacian_threshold","float",100.0).doc("Threshold of the laplacian to detect rocks edges. It is not zet tied to a physical property.")
    property("rover_obstacle_clearance","float",0.12).doc("Obstacles the rover can tolerate when there is no sinkage [m]")
    property("rover_slope_gradeability","float",0.33).doc("Slope the rover can travel in nominal case [rad]")
    property("obstacle_kernel_size","int",3).doc("Kernel size to dilate obstacle first time [cells]")
    property("obstacle_iterations","int",2).doc("First obstacle dilation iterations")
    property("obstacle_vicinity_kernel_size","int",3).doc("Kernel size to dilate obstacle second time [cells]")
    property("obstacle_vicinity_iterations","int",3).doc("Second obstacle dilation iterations (area surrounding an obstacle)")
    property("robot_size","float",0.7).doc("Robot size for square kernel used for final traversability map dilation [m]")
    property("dilation_iterations","int",2).doc("Final traversability map dilation iterations")

    input_port "elevation_map", "/base/samples/DistanceImage"
    input_port "pose", "/base/samples/RigidBodyState"
    input_port "local2global_orientation", "/base/samples/frame/Frame"

    output_port "traversability_map", "/base/samples/frame/Frame"

    port_driven
end

